import { MigrationInterface, QueryRunner } from 'typeorm';

export class FirstSetup1736985963936 implements MigrationInterface {
  name = ' FirstSetup1736985963936';

  public async up(queryRunner: QueryRunner): Promise<void> {
    await queryRunner.query(
      `CREATE TYPE "public"."sessions_status_enum" AS ENUM('active', 'inactive', 'expired', 'closed', 'suspended', 'invalid', 'pending')`,
    );
    await queryRunner.query(
      `CREATE TABLE "sessions" ("createdAt" TIMESTAMP NOT NULL DEFAULT now(), "updatedAt" TIMESTAMP NOT NULL DEFAULT now(), "archivedAt" TIMESTAMP, "id" integer GENERATED BY DEFAULT AS IDENTITY NOT NULL, "uuid" uuid NOT NULL DEFAULT uuid_generate_v4(), "sessionId" character varying(255), "sessionType" character varying(50) NOT NULL, "sessionDuration" integer, "sessionClosedType" character varying(50) NOT NULL, "token" text, "expiresInAt" TIMESTAMP, "loggedInAt" TIMESTAMP, "loggedOutAt" TIMESTAMP, "ipAddress" character varying(100) NOT NULL, "refreshToken" text, "userAgent" character varying(255) NOT NULL, "failedAttempts" integer NOT NULL DEFAULT '0', "origin" character varying(100) NOT NULL, "location" character varying(100) NOT NULL, "status" "public"."sessions_status_enum" NOT NULL DEFAULT 'pending', "accountId" integer NOT NULL, CONSTRAINT "UQ_faf29798ea59ac7f07b1be6f79b" UNIQUE ("uuid"), CONSTRAINT "PK_3238ef96f18b355b671619111bc" PRIMARY KEY ("id"))`,
    );
    await queryRunner.query(`CREATE TYPE "public"."profiles_gender_enum" AS ENUM('MAN', 'WOMAN')`);
    await queryRunner.query(
      `CREATE TABLE "profiles" ("createdAt" TIMESTAMP NOT NULL DEFAULT now(), "updatedAt" TIMESTAMP NOT NULL DEFAULT now(), "archivedAt" TIMESTAMP, "id" integer GENERATED BY DEFAULT AS IDENTITY NOT NULL, "uuid" uuid NOT NULL DEFAULT uuid_generate_v4(), "names" text NOT NULL, "lastName" character varying(100) NOT NULL, "secondLastName" character varying(100), "phoneNumber" character varying(13) NOT NULL, "gender" "public"."profiles_gender_enum" NOT NULL, "user_id" integer, "addressStreet" character varying(100) NOT NULL, "addressExtnumber" character varying(10) NOT NULL, "addressIntnumber" character varying(10), "addressNeighborhood" character varying(100) NOT NULL, "addressZipcode" character varying(10) NOT NULL, "addressCity" character varying(100) NOT NULL, "addressState" character varying(100) NOT NULL, "addressCountry" character varying(100) NOT NULL, CONSTRAINT "UQ_2c0c7196c89bdcc9b04f29f3fe6" UNIQUE ("uuid"), CONSTRAINT "UQ_8197446e07563b8f4c34f69881f" UNIQUE ("phoneNumber"), CONSTRAINT "REL_9e432b7df0d182f8d292902d1a" UNIQUE ("user_id"), CONSTRAINT "PK_8e520eb4da7dc01d0e190447c8e" PRIMARY KEY ("id"))`,
    );
    await queryRunner.query(
      `CREATE TYPE "public"."users_status_enum" AS ENUM('Active', 'Inactive', 'Pending', 'Suspended', 'Archived', 'Banned', 'UnderReview')`,
    );
    await queryRunner.query(
      `CREATE TABLE "users" ("createdAt" TIMESTAMP NOT NULL DEFAULT now(), "updatedAt" TIMESTAMP NOT NULL DEFAULT now(), "archivedAt" TIMESTAMP, "id" integer GENERATED BY DEFAULT AS IDENTITY NOT NULL, "uuid" uuid NOT NULL DEFAULT uuid_generate_v4(), "status" "public"."users_status_enum" NOT NULL, CONSTRAINT "UQ_951b8f1dfc94ac1d0301a14b7e1" UNIQUE ("uuid"), CONSTRAINT "PK_a3ffb1c0c8416b9fc6f907b7433" PRIMARY KEY ("id"))`,
    );
    await queryRunner.query(
      `CREATE TABLE "accounts" ("createdAt" TIMESTAMP NOT NULL DEFAULT now(), "updatedAt" TIMESTAMP NOT NULL DEFAULT now(), "archivedAt" TIMESTAMP, "id" integer GENERATED BY DEFAULT AS IDENTITY NOT NULL, "uuid" uuid NOT NULL DEFAULT uuid_generate_v4(), "username" character varying(100) NOT NULL, "email" character varying(255) NOT NULL, "password" character varying NOT NULL, "user_id" integer NOT NULL, CONSTRAINT "UQ_45705ce5c594e0b9f6158a43370" UNIQUE ("uuid"), CONSTRAINT "UQ_477e3187cedfb5a3ac121e899c9" UNIQUE ("username"), CONSTRAINT "UQ_ee66de6cdc53993296d1ceb8aa0" UNIQUE ("email"), CONSTRAINT "PK_5a7a02c20412299d198e097a8fe" PRIMARY KEY ("id"))`,
    );
    await queryRunner.query(
      `CREATE TABLE "roles" ("createdAt" TIMESTAMP NOT NULL DEFAULT now(), "updatedAt" TIMESTAMP NOT NULL DEFAULT now(), "archivedAt" TIMESTAMP, "id" integer GENERATED BY DEFAULT AS IDENTITY NOT NULL, "uuid" uuid NOT NULL DEFAULT uuid_generate_v4(), "name" character varying(50) NOT NULL, "description" character varying(255), CONSTRAINT "UQ_cdc7776894e484eaed828ca0616" UNIQUE ("uuid"), CONSTRAINT "UQ_648e3f5447f725579d7d4ffdfb7" UNIQUE ("name"), CONSTRAINT "PK_c1433d71a4838793a49dcad46ab" PRIMARY KEY ("id"))`,
    );
    await queryRunner.query(
      `ALTER TABLE "sessions" ADD CONSTRAINT "FK_6fee377066ebeed22567e4390ee" FOREIGN KEY ("accountId") REFERENCES "accounts"("id") ON DELETE NO ACTION ON UPDATE NO ACTION`,
    );
    await queryRunner.query(
      `ALTER TABLE "profiles" ADD CONSTRAINT "FK_profile_user" FOREIGN KEY ("user_id") REFERENCES "users"("id") ON DELETE NO ACTION ON UPDATE NO ACTION`,
    );
    await queryRunner.query(
      `ALTER TABLE "accounts" ADD CONSTRAINT "FK_account_user" FOREIGN KEY ("user_id") REFERENCES "users"("id") ON DELETE NO ACTION ON UPDATE NO ACTION`,
    );
  }

  public async down(queryRunner: QueryRunner): Promise<void> {
    await queryRunner.query(`ALTER TABLE "accounts" DROP CONSTRAINT "FK_account_user"`);
    await queryRunner.query(`ALTER TABLE "profiles" DROP CONSTRAINT "FK_profile_user"`);
    await queryRunner.query(
      `ALTER TABLE "sessions" DROP CONSTRAINT "FK_6fee377066ebeed22567e4390ee"`,
    );
    await queryRunner.query(`DROP TABLE "roles"`);
    await queryRunner.query(`DROP TABLE "accounts"`);
    await queryRunner.query(`DROP TABLE "users"`);
    await queryRunner.query(`DROP TYPE "public"."users_status_enum"`);
    await queryRunner.query(`DROP TABLE "profiles"`);
    await queryRunner.query(`DROP TYPE "public"."profiles_gender_enum"`);
    await queryRunner.query(`DROP TABLE "sessions"`);
    await queryRunner.query(`DROP TYPE "public"."sessions_status_enum"`);
  }
}
